@page "/Trade/{Id:int}"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@using Models
@using DBL
@inject IModalService modal
@using Blazored.Modal;
@using System.Text;
@using System.Text.Json;
@using ConsoleAppTest

<label for="inputPrice" class="sr-only">amount</label>
<input @bind-value="tr.amount" type="text" id="inputPrice" class="form-control m-1" placeholder="Price" required autofocus>
<Button Color="Color.Primary" class="btn btn-lg btn-primary btn-block m-1" @onclick="@(Send)">buy</Button>
<label>@str</label>
<label for="inputPrice" class ="sr-only"></label>


@code {
    private coin c = null;
    customer customer = new customer();
    [Parameter] public int Id { get; set; }
    transaction tr = new transaction();
    bool b;
    string str = "";
    public async Task ShowModal()
    {
        var messageForm = modal.Show<InsertTrans>();
        var result = await messageForm.Result;
        if (result.Confirmed && result.Data != null)
        {
            transaction temp = (transaction)result.Data;
            tr.credit = temp.credit;
            tr.identification = temp.identification;
            tr.customerid = customer.id;
            tr.date = DateTime.Now;
            b = await Insert();
        }
        StateHasChanged();
    }
    protected override async void OnParametersSet()
    {
        coinDB cdb = new coinDB();
        c = await cdb.SelectByPkAsync(Id);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var customerSession = await MySession.GetAsync<customer>("customerSession");
        if (customerSession.Success)
        {
            customer = customerSession.Value;
            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("login");
    }
    public async Task<bool> Insert()
    {
        HttpClient client = new HttpClient();
        var jsonBU = new StringContent(JsonSerializer.Serialize(tr), Encoding.UTF8, "application/json");
        var response = await client.PostAsync("http://localhost:5256/InsertTrans", jsonBU);
        return response.IsSuccessStatusCode;

    }

    public async Task<bool> SendReceipt()
    {
        string ReceiptBody = $@"Hello {tr.identification} this is your receipt plzzzzz accept my receipt
            price you delivered is {tr.amount} at the date {tr.date}";
        return await EmailService.SendEmailAsync("maxmaxsht@gmail.com", "receipt", ReceiptBody);
    }

    public async Task SendSuccess()
    {
        if (await SendReceipt())
        {
            str = "Receipt sent successfully";
        }
        else
        {
            str = "nooooooooooooo";
        }
    }
    public async Task Send()
    {
        await ShowModal();
        await SendSuccess();

    }
}
