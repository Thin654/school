@page "/Trade/{Id:int}"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@using Models
@using DBL
@inject IModalService modal
@* @inject bool b *@
@using Blazored.Modal;
@using System.Text;
@using System.Text.Json;
@using ConsoleAppTest

<label for="inputPrice" class="sr-only">&nbsp;amount</label>
<input @bind-value="tr.amount" type="text" id="inputPrice" class="form-control m-1" placeholder="Price" required autofocus>
<Button Color="Color.Primary" class="btn btn-lg btn-primary btn-block m-1" @onclick="@(Send)">buy</Button>
<label>@str</label>
<label for="inputPrice" class ="sr-only"></label>
<br />
<br />
<label>&nbsp;buy coin</label>
<input @bind-value="Coin" type="text" id="inputPrice" class="form-control m-1" placeholder="Price" required autofocus>
@{
        if(c != null && Coin != 0)
        {
        <label>&nbsp;@Coin @(c.namecoin) ~ @(Coin * c.rate)$</label>
        } 
    }
<br />
<label>&nbsp;you have @(amount)$</label>

<Button Color="Color.Primary" class="btn btn-lg btn-primary btn-block m-1" @onclick="@(OpenTrade)">buy</Button>

@code {
    private coin c = null;
    customer customer = new customer();
    [Parameter] public int Id { get; set; }
    transaction tr = new transaction();
    trade t = new trade();
    bool b = true;
    bool ifsuccesstransaction = false;
    string str = "";
    double Coin;
    static double amount = 0;
    public async Task ShowModalTransaction()
    {
        var messageForm = modal.Show<InsertTrans>();
        var result = await messageForm.Result;
        if (result.Confirmed && result.Data != null)
        {
            transaction temp = (transaction)result.Data;
            tr.credit = temp.credit;
            tr.identification = temp.identification;
            tr.customerid = customer.id;
            tr.date = DateTime.Now;
            ifsuccesstransaction = true;
            await Insert();
        }
        StateHasChanged();
    }
    protected override async void OnParametersSet()
    {
        coinDB cdb = new coinDB();
        c = await cdb.SelectByPkAsync(Id);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var customerSession = await MySession.GetAsync<customer>("customerSession");
        if (customerSession.Success && customerSession.Value != null)
        {
            customer = customerSession.Value;
            if(b)
            {
                b = false;
                await ShowAmount();

            }

            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("login");
    }
    public async Task<bool> Insert()
    {
        HttpClient client = new HttpClient();
        var jsonBU = new StringContent(JsonSerializer.Serialize(tr), Encoding.UTF8, "application/json");
        var response = await client.PostAsync("http://localhost:5256/InsertTrans", jsonBU);
        return response.IsSuccessStatusCode;

    }
    public async Task<bool> SendReceipt()
    {
        string ReceiptBody = $@"Hello this is your receipt plzzzzz accept my receipt
            price you delivered is {tr.amount} at the date {tr.date}";
        if(await EmailService.SendEmailAsync("maxmaxsht@gmail.com", "receipt", ReceiptBody))
        {
            str = "Receipt sent successfully";
            return true;
        }
        str = "nooooooooooooo";
        return false;
    }
    public async Task Send()
    {
        await ShowModalTransaction();
        if(ifsuccesstransaction)
        {
            amount = amount + tr.amount;
            await SendReceipt();
        }
        
        StateHasChanged();
    }
    public async Task ShowAmount()
    {
        amount = 0;
        // List<transaction> l = null;
        HttpClient client = new HttpClient();
        //var jsonBU = new StringContent(JsonSerializer.Serialize(l), Encoding.UTF8, "application/json");
        List<transaction> l = await client.GetFromJsonAsync<List<transaction>>($"http://localhost:5256/GetAll/{customer.id}");
        List<trade> lt = await client.GetFromJsonAsync<List<trade>>($"http://localhost:5256/GetAllTrades/{customer.id}");
        for (int i = 0; i < l.Count; i++)
        {
            amount = amount + l[i].amount;
        }
        for (int i = 0; i < lt.Count; i++)
        {
            if (lt[i].sl == true)
                amount = amount - lt[i].rate * lt[i].amount;
            else if (lt[i].sl == false)
                amount = amount + lt[i].rate * lt[i].amount;
        }
        StateHasChanged();
    }
    public async Task OpenTrade()
    {
        t.customerid = customer.id;
        t.coinid = c.coincode;
        t.rate = c.rate;
        t.date = DateTime.Now;
        t.sl = true;
        t.amount = Coin;
        if (Coin * c.rate < amount)
        {
            HttpClient client = new HttpClient();
            var jsonBU = new StringContent(JsonSerializer.Serialize(t), Encoding.UTF8, "application/json");
            var response = await client.PostAsync("http://localhost:5256/InsertTrade", jsonBU);
            amount = amount - t.amount * t.rate;
        }
        // transaction tra = new transaction();
        // tra.amount = -(Coin * c.rate);
        // tra.date = DateTime.Now;
        // tra.customerid = customer.id;
        // var jsonBU1 = new StringContent(JsonSerializer.Serialize(tra), Encoding.UTF8, "application/json");
        // var response1 = await client.PostAsync("http://localhost:5256/InsertTrans", jsonBU);
        StateHasChanged();
    }
}
