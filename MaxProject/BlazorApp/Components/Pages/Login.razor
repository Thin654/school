@page "/login"
@using Models
@using DBL;
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@{
    if(loggedin)
    {
        logoutasync();
    }
} 
<div class="form-signin text-center w-50 m-2">
    <label for="inputEmail" class="sr-only">email</label>
    <input @bind-value="email" type="email" id="inputEmail" class="form-control m-1" placeholder="Email" required autofocus>
    <label for="inputEmail" class="sr-only">password</label>
    <input @bind-value="password" type="password" id="inputPassword" class="form-control m-1" placeholder="Password" required>
    <button @onclick="CheckLogin" class="btn btn-lg btn-primary btn-block m-1" type="submit">Sign in</button>
    <div class="mt-5 mb-3 text-muted">@s</div>
</div>


@code {
    private string email = "";
    private string password = "";
    private string s = "";
    bool loggedin = false;
    private async Task CheckLogin()
    {
        customerDB cdb = new customerDB();
        customer customer = await cdb.login(email, password);
        if (customer != null)
        {
            await MySession.SetAsync("customerSession", customer);
            navigationManager.NavigateTo("/");
            loggedin = true;
        }
        else
        {
            s = "Incorrect username or password";
        }
    }
    public async Task logoutasync()
    {
        var customerSession = await MySession.GetAsync<customer>("customerSession");
        if (customerSession.Success)
        {
            await MySession.DeleteAsync("customerSession");
            navigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }
}
