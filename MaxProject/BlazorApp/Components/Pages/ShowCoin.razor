@page "/ShowCoin/{Id:int}"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Models
@using DBL
@if (c == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Product section     URL=https://startbootstrap.com/template/shop-item#google_vignette-->
    <section class="py-1">
        <div class="container px-4 px-lg-5 my-5">
            <div class="row gx-4 gx-lg-5 align-items-center">
                <div class="col-md-6"><img class="card-img-top mb-5 mb-md-0" src="data:image/@c.icon;base64, @System.Convert.ToBase64String((byte[])@c.icon)" alt="@c.icon" /></div>
                <div class="col-md-6">
                    <div class="small mb-1">@c.symbol</div>
                    <h1 class="display-5 fw-bolder">@c.namecoin</h1>
                    <div class="fs-5 mb-5">
                        <span class="text">@c.rate</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        // Fetch Bitcoin price from CoinGecko API
        fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd')
            .then(response => response.json())
            .then(data => {
                const bitcoinPrice = data.bitcoin.usd;
                document.getElementById('bitcoin-price').textContent = `$${bitcoinPrice.toLocaleString()}`;
            })
            .catch(error => {
                console.error('Error fetching Bitcoin price:', error);
            });
    </script>
}
@code {
    private coin c = null;
    [Parameter] public int Id { get; set; }
    
    protected override async void OnParametersSet()
    {
        coinDB cdb = new coinDB();
        c = await cdb.SelectByPkAsync(Id);
        StateHasChanged();
    }

}