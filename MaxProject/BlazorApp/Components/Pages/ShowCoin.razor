@using System;
@using System.Text.RegularExpressions;
@using System.Threading.Tasks;
@page "/ShowCoin/{Id:int}"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Models
@using DBL
@if (c == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Product section     URL=https://startbootstrap.com/template/shop-item#google_vignette-->
    <section class="py-1">
        <div class="container px-4 px-lg-5 my-5">
            <div class="row gx-4 gx-lg-5 align-items-center">
                <div class="col-md-6"><img class="card-img-top mb-5 mb-md-0" src="data:image/@c.icon;base64, @System.Convert.ToBase64String((byte[])@c.icon)" alt="@c.icon" /></div>
                <div class="col-md-6">
                    <div class="small mb-1">@c.symbol</div>
                    <h1 class="display-5 fw-bolder">@c.namecoin</h1>
                    <div class="fs-5 mb-5">
                        <span class="text">@c.rate</span> <span><button class="btn btn-primary" @onclick="@(async () => await Increment())">Refresh rate</button></span>
                    </div>
                </div>
            </div>
        </div>
    </section>

}
@code {
    private coin c = null;
    [Parameter] public int Id { get; set; }
    string ResultStr = "...";
    public string str { get; set; }
    string uri = "";
    coinDB cdb = new coinDB();
    protected override async Task OnParametersSetAsync()
    {
        c = await cdb.SelectByPkAsync(Id);
        uri = $"https://api.coingecko.com/api/v3/simple/price?ids=" + c.namecoin + "&vs_currencies=usd";
        try
        {
            HttpClient client = new HttpClient();
            str = await client.GetStringAsync(uri);
            //.GetStringAsync(uri);
            double number = await ExtractNumberAsync(str);
            c.rate = number;
            await cdb.UpdateAsync(c);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ResultStr = ex.ToString();
        }
        //StateHasChanged();
    }
    static async Task<double> ExtractNumberAsync(string input)
    {
        string pattern = @"\d+(\.\d+)?";
        Match match = await Task.Run(() => Regex.Match(input, pattern));

        if (match.Success)
        {
            string numberString = match.Value;
            return double.Parse(numberString);
        }
        else
        {
            throw new Exception("No number found in the input string.");
        }
    }
    async Task Increment()
    {
        await Task.Delay(1000);
        await OnParametersSetAsync();
        StateHasChanged();
    }
}