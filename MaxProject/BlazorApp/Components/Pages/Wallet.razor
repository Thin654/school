@page "/wallet"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@using Models
@using DBL
@inject IModalService modal
@* @inject bool b *@
@using Blazored.Modal;
@using System.Text;
@using System.Text.Json;
@using ConsoleAppTest

<h1>@((double)amount_USD)</h1>
<ul>
    @{
        if(parameters != null)
            foreach(var coin in parameters)
            {
                <li>@coin.Key @coin.Value</li>
            }
    }
</ul> 

@code {
    static Dictionary<string, decimal> parameters = new Dictionary<string, decimal>();
    static double amount_USD = 0;
    bool b = true;
    customer customer = new customer();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var customerSession = await MySession.GetAsync<customer>("customerSession");
        if (customerSession.Success && customerSession.Value != null)
        {
            customer = customerSession.Value;
            if(b)
            {
                b = false;
                await ShowAmount();
                await GetSumOfCoin(); 
            }
            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("login");
    }
    // protected override async Task OnInitializedAsync()
    // {
    //     //await ShowAmount();
    //     await GetSumOfCoin();
    // }
    // public async Task ShowAmount()
    // {
    //     amount_USD = 0;
    //     HttpClient client = new HttpClient();
    //     //var jsonBU = new StringContent(JsonSerializer.Serialize(l), Encoding.UTF8, "application/json");
    //     List<transaction> l = await client.GetFromJsonAsync<List<transaction>>($"http://localhost:5256/GetAll/{customer.id}");
    //     for (int i = 0; i < l.Count; i++)
    //     {
    //         amount_USD = amount_USD + l[i].amount;
    //     }
    //     StateHasChanged();
    // }
    public async Task ShowAmount()
    {
        amount_USD = 0;
        // List<transaction> l = null;
        HttpClient client = new HttpClient();
        //var jsonBU = new StringContent(JsonSerializer.Serialize(l), Encoding.UTF8, "application/json");
        List<transaction> transactionList = await client.GetFromJsonAsync<List<transaction>>($"http://localhost:5256/GetAll/{customer.id}");
        List<trade> tradeList = await client.GetFromJsonAsync<List<trade>>($"http://localhost:5256/GetAllTrades/{customer.id}");
        for (int i = 0; i < transactionList.Count; i++)
        {
            amount_USD = amount_USD + transactionList[i].amount;
        }
        for (int i = 0; i < tradeList.Count; i++)
        {
            if (tradeList[i].sl == true)
                amount_USD = amount_USD - tradeList[i].rate * tradeList[i].amount;
            else if (tradeList[i].sl == false)
                amount_USD = amount_USD + tradeList[i].rate * tradeList[i].amount;
        }
        StateHasChanged();
    }
    public async Task<List<coin>> ShowCoins()
    {
        coinDB cd = new coinDB();
        List<coin> list_coins = await cd.GetAllAsync();
        return list_coins;
    }
    public async Task GetSumOfCoin()
    {
        DoubleDB d = new DoubleDB();
        //tradeDB td = new tradeDB();
        List<coin> list_coins = await ShowCoins();
        parameters = new Dictionary<string, decimal>();
        foreach(coin i in list_coins)
        {
            HttpClient client = new HttpClient();
            int cc = i.coincode;
            //var jsonBU = new StringContent(JsonSerializer.Serialize(l), Encoding.UTF8, "application/json");
            decimal long_sum = await client.GetFromJsonAsync<decimal>($"http://localhost:5256/GetSum/{customer.id}/{cc}/{1}");
            decimal short_sum = await client.GetFromJsonAsync<decimal>($"http://localhost:5256/GetSum/{customer.id}/{cc}/{0}");
            long_sum = long_sum - short_sum;
            if (long_sum > 0)
                parameters.Add(i.namecoin, long_sum);
        }
    }
}
