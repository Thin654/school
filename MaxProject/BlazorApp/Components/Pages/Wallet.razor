@page "/wallet"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@using Models
@using DBL
@inject IModalService modal
@inject bool b
@using Blazored.Modal;
@using System.Text;
@using System.Text.Json;
@using ConsoleAppTest

<h1>@amount_USD</h1>
 <ul>
    @{
        if(parameters != null)
            foreach(var coin in parameters)
            {
                <li>@coin.Key @coin.Value</li>
            }
    }
</ul>

@code {
    static Dictionary<string, double> parameters = new Dictionary<string, double>();
    //static bool b = true;
    static double amount_USD = 0;
    customer customer = new customer();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var customerSession = await MySession.GetAsync<customer>("customerSession");
        if (customerSession.Success)
        {
            customer = customerSession.Value;
            if (b)
            {
                b = false;
                await ShowAmount();
                await GetSumOfCoin();
            }

            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("login");
    }
    public async Task ShowAmount()
    {
        amount_USD = 0;
        transactionDB tdb = new transactionDB();
        List<transaction> l = await tdb.SelectByCustomer(customer.id);
        for (int i = 0; i < l.Count; i++)
        {
            amount_USD = amount_USD + l[i].amount;
        }
        StateHasChanged();
        b = true;
    }
    public async Task<List<coin>> ShowCoins()
    {
        coinDB cd = new coinDB();
        List<coin> list_coins = await cd.SelectAllAsync("SELECT * FROM projectmax.coin;");
        return list_coins;
    }
    public async Task GetSumOfCoin()
    {
        tradeDB td = new tradeDB();
        List<coin> list_coins = await ShowCoins();
        for (int i = 0; i < list_coins.Count; i++)
        {
            List<trade> list_trades = await td.GetListByCoinAndCustomer(customer.id, list_coins[i].coincode);
            if(list_trades != null)
                parameters.Add(list_coins[i].namecoin, await GetSumAmount(list_trades));
        }
        StateHasChanged();
        b = true;
    }
    public async Task<double> GetSumAmount(List<trade> t)
    {
        double amount = 0;
        for (int i = 0; i < t.Count; i++)
        {
            amount = amount + t[i].amount;
        }
        return amount;
    }
}
